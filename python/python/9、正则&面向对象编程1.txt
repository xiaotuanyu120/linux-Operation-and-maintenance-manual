9、正则&面向对象编程1
2015年8月29日
11:48
 
附加下节课：
     初级工程师必备，除编程之外
     Python基础语法
     抽象思维（能力）
     
     git（git flow 工作流），linux，数据库，mysql，表之间的关系，建立模型，
     缓存应用的经验，LRU, memcached/redis
     nginx，网络编程，http，socket，epoll（非阻塞IO模型）
     
     web：cgi，wsgi   web框架（熟悉一个）
     html
 
     附加：
          css， javascript
 
 
补充：
正则表达式的使用：
 
参考《Python正则表达式指南》：http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html
 
 
 
 
   课前提要：
 
          使用类完成做饭买菜的功能。
 
 
          Human
          |          |
          |          |
          Boy     Girl
          |          |
          大白    大红
 
          
 
          
          
 
 
     9.1. 什么是面向对象编程（OOP）：http://baike.baidu.com/view/63596.htm
          9.1.1 什么是对象？
                    Object，物件，东西
 
                    属性 -- 可以被描述
                    动作 -- 完成某件事
                    
          9.1.2. 通俗来讲：一切皆对象
               抽象的看世界
               同函数一样--是对逻辑的抽象，对过程的抽象，
               对象是对具体事物（数据）和操作的抽象
               比如： s = 'huyang'    s 就是个对象
               再比如函数
               def say():pass
 
               say.func_name
 
          9.1.3 什么是面向？Oriented （导向）
 
               以对象为导向
 
               所以OOP就是，用以对象为导向的方式来编程。
               以对象为基础，注意，之前是以函数为基础来编程。
 
               java中一级公民： class， print 'hello'
 
               python中一级公民： function ： print('hello')
 
               类是OOP的主要工具
 
          9.1.4. 为什么要面向对象
          先来回忆下函数之前
 
          进一步的抽象--我们想描述这个世界
 
 
 
          9.1.4. 面向对象三要素：
                   封装，继承，多态
 
                    封装：
                         将数据抽象为对象，包含自己所需的数据，提供接口给外部使用
                         优点：
                              减少耦合--数据独立，只暴露接口    
                              
                         还是打个比喻：外卖窗口，只有一个进出的接口
 
 
                    继承：
                         通过某种方式拥有另外一个对象（类）所有的属性和方法。
                         比如：富二代
 
                         优点：
                              复用
 
                         举例：
 
                             重复的东西抽取出去，形成基类
 
                    多态：
                         鸭子类型（duck type）（嘎嘎叫的就是鸭子）
                         不同的对象可以相互替代，只要他们有相同的属性或者方法                      
                          
 
     9.2. Python中怎么定义对象
          class关键字
          class Human:
                    name = 'anyone'
                    def __init__(self, name):
                            self.name = name
 
                    def eat(self, food_name):
                               print self.name, 'eat', food_name
 
                    def speak(self, words):
                                print  self.name, ' shuo ', words
 
 
          human = Human('someone')
          print human.name
          human.eat('hotdog')
          human.speak('very good')
 
          self是什么？一定是self吗？
 
          类  和  实例
 
          怎么继承：
 
          class Boy(Human):
               def buy_food(self, food_name):
                       print self.name, 'go to buy', food_name
                       return food_name
 
         boy = Boy('xiaozhang')
         print boy.name
         boy.buy_food('bacai')
         boy.eat('baicai')
 
          class Girl(Human):
                def cook_food(self, food):
                       print self.name, 'cook', food
 
 
          演示多态：
 
          h = None
          who = raw_input('chose person, boy or girl')
          if who == 'boy:
              h = Boy('test')
          elif who == 'girl':
              h = Girl('lili')
          else:
               h = Human('nobody')
 
          h.speak('how are you')
          
 
 
     9.3  新式类
 
 
     老式类
       class T:
             pass
In [1]: class Person:
   ...:     name = []
   ...:
 
In [2]: p1 = Person()
 
In [31]: p1.__class__
Out[31]: <class __main__.Person at 0x7ff697d87c80>
 
In [32]: type(p1)
Out[32]: instance
 
     新式类：
       class T(object):
             pass
In [34]: class Person2(object):
   ....:     name = []
   ....:
 
In [35]: p3 = Person2()
 
In [36]: p3.__class__
Out[36]: __main__.Person2
 
In [37]: type(p3)
Out[37]: __main__.Person2
 
In [38]: dir(Person)
Out[38]: ['__doc__', '__module__', 'name']
 
In [39]: dir(Person2)
Out[39]:
['__class__',
 '__delattr__',
 '__dict__',
 '__doc__',
 '__format__',
 '__getattribute__',
 '__hash__',
 '__init__',
 '__module__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 'name']
 
In [40]: Person2.__class__
Out[40]: type
 
 
http://python-history.blogspot.sg/2010/06/inside-story-on-new-style-classes.html     
The Inside Story on New-Style Classes by Guido 
作业1：使用timeit模块，对比正则表达式，先编译快，还是直接使用search搜索快
 
   作业2： 总结新式类和旧式类的区别。
 
    作业3：
          使用面向对象的方式，完成大白想吃饭，不会做，去找大红做饭的场景，越细致越好。食物可以定义为类。
 
