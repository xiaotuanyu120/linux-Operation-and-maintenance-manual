9、类2
2015年8月29日
21:14
 
讲题总结
===================================
* return 的对象类型要一致
* w模式打开文件，会清空文件
* 函数参数名称对应的数据类型要一致
* 全局变量要大写
 
NEW MODULE
===================================
collections - High-performance container datatypes
 
DESCRIPTION：
This module implements specialized container datatypes providing alternatives to Python's general purpose built-in containers, dict, list, set, and tuple.
这个模块是一个特殊的数据类型容器，在python内置的数据类型容器(dict, list, set, and tuple)之外提供了一个新的选择 
FUNCTIONS：
namedtuple() - Factory Function for Tuples with Named Fields
Named tuples assign meaning to each position in a tuple and allow for more readable, self-documenting code. They can be used wherever regular tuples are used, and they add the ability to access fields by name instead of position index.
namedtuple()在tuple中赋予每一个位置以具体的含义，使它更具可读性。它可以用在所有常规tuples存在的地方，用具体的名称代替数字index
 
SYNTAX：
collections.namedtuple(typename, field_names[, verbose=False][, rename=False])
typename, 自建数据类型名称
field_names, 用来替代数字index的字符串
# 导入namedtuple函数
>>> from collections import namedtuple
 
# 创建yanse类型，使用一个list来做索引
>>> Color = namedtuple('yanse', ['red', 'green', 'blue'])
 
# 创建一个tuple实例
>>> color  = Color(55, 155, 255)
 
# 可以用类似类与方法调用的方式
>>> print color.red, color.blue, color.green
55 255 155
 
# 看看color的类型
>>> type(color)
<class '__main__.yanse'> 
学习链接：
https://docs.python.org/2.7/library/collections.html?highlight=collections#module-collections 
 
json
pickle
 
9.3. 类和对象
类，就是class定义的东西
对象分两种，
一种是实际运行中实例化之后的东西
一种是讨论某个概念时的东西
类名称
类名称用驼峰，类方法用下划线方式
 
9.4  Python的作用域和命名空间
类变量，实例变量，私有变量（公开）
# 类变量可以直接被程序引用
class Var(object):
    class_var = 'class variable'
    def __init__(self, var):
        self.var = var
 
if __name__ == '__main__':
    ins = Var('instance')
    print ins.class_var
 
# 执行结果
class variable 
# 实例变量的引用，需要self.var这种形式
class Var(object):
    class_var = 'class variable'
    def __init__(self, var):
        self.var = var
    def print_var(self):
        print self.var                  # print var会报错         
        print self.class_var
 
if __name__ == '__main__':
    ins = Var('instance')
 
    ins.print_var()
 
# 执行结果
instance
class variable 
9.5  继承
# 继承
>>> class A(object):
...     attr = 'A'
...
>>> class B(A):
...     pass
...
>>> b = B()
>>> b.attr
'A' 
# 多重继承
>>> class A(object):
...     attr = 'A'
...
>>> class B(object):
...     attr = 'B'
...
>>> class C(A, B):
...     pass
...
>>> c = C()
>>> c.attr
'A'
# 继承优先级，从左到右，从上到下 
# class.mro()继承顺序
In [1]: class A(object):
   ...:     def say(self):
   ...:         print 'A'
   ...:
 
In [2]: class B(object):
   ...:     def say(self):
   ...:         print 'B'
   ...:
 
In [3]: class C(A, B):
   ...:     pass
   ...:
 
In [4]: c = C()
 
In [5]: c.say()
A
 
# 如何查看say函数的执行顺序
In [9]: print C.mro()
[<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <type 'object'>] 
 如何初始化父类的内容？如何调用父类的函数？
In [10]: class D(A):
   ....:     def say(self):
   ....:         super(D, self).say()
   ....:         print 'D'
   ....:
 
In [11]: d = D()
 
In [12]: d.say()
A
D
 
# 也可以不用super()，super()只能作用于新式类
In [13]: class D(A):
    def say(self):
        A.say(self)
        print 'D'
   ....:
 
In [14]: d = D()
 
In [15]: d.say()
A
D
  
          说下Mixin这个东西
               Mixin
  
                  
9.6 私有变量和类内引用
          self这个东西
 
          __var
 
          类变量何时被初始化
 
实例方法
实例传入方法，只有生成实例才可以使用的方法
 
          静态方法
无需传入实例本身，无需传入类，无需实例化即可使用的方法
 
          类方法
          类不需要实例化，便可调用，但需要传入类到方法中
         
 
9.7 动态添加类属性
          class A:
               pass
 
          a = A()
          a.name = 'huyang'
           
9.8 类之间关系：
9.8.1 UML （统一建模语言）
               具体定义
               日常使用
9.8.2 如何表示
               
9.8.3 模型表示
               你去做一个数据库模型来，怎么做？
9.8.4 常见得几种关系
                继承
                依赖
                组合
                聚合
 
9.9 接口的概念（抽象类）
          参考Java中的概念
          在Python中实现
     
         
          可参考：https://docs.python.org/2/library/abc.html  很少用
 
9.10 实现Python中的几种数据类型
 
          int  特性
          str 特性
          dict 实现
 
9.11  高级--迭代器和生成器
1. t = (i for i in range(10))
# tuple生成器
>>> t = (i for i in range(10))
>>> print t, '\n', type(t)
<generator object <genexpr> at 0x7fd6e63107d0>
<type 'generator'>
 
# 列表推导式
>>> t = [i for i in range(10)]
>>> print t, '\n', type(t)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
<type 'list'> 
2. yield expression
简单例子
## 把yield放进func内部，那这个func被调用的时候就会传回一个生成器
>>> def yield_expression(num):
...     for i in range(num):
...         yield i
...
 
## num_list现在是个生成器
>>> num_list = yield_expression(10)
>>> print num_list, '\n', type(num_list)
<generator object yield_expression at 0x7fd6e63107d0>
<type 'generator'>
 
## 生成器可以用迭代的方式取出内容
>>> for i in num_list:
...     print i
...
0
1
2
3
4
5
6
7
8
9 
？如果有两个yield呢（两个yield放进一个for循环中）
>>> def yield_expression(num):
...     for i in range(num):
...         yield i
...         yield 'yield 2'
...
>>> num_list = yield_exppression(10)
>>> for i in num_list:
...     print i
...
0
yield 2
1
yield 2
2
yield 2
3
yield 2
4
yield 2
5
yield 2
6
yield 2
7
yield 2
8
yield 2
9
yield 2 
？如果有多个yield，但在不同的for循环中呢
>>> def yield_exp():
...     for i in range(3):
...         yield i
...     yield '-----------split line------------'
...     for j in range(3, 6):
...         yield j
...
>>> num_list = yield_exp()
>>> for i in num_list:
...     print i
...
0
1
2
-----------split line------------
3
4
5 
3. 给对象添加'__iter__'/'next'方法
 
官方解释：
https://docs.python.org/3/reference/expressions.html#yieldexpr                        
生成器是特殊的迭代器，生成器符合具有迭代器协议
 
 
补充知识：
https://docs.python.org/2/library/collections.html
 
 
 
上课节点：
 
 
作业：
     1. 使用面向对象的方式完成学生信息管理系统。
     2. 《Python基础教程》上的项目1：即时标记
     3. 时间充裕的话：熟悉coding.net，把代码传上去。
 
