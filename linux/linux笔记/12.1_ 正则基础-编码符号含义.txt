12.1: 正则基础-编码符号含义
2014年12月10日
20:00
 
前言介绍
===============================================
正规表示法并不是某种工具独占的用法
它是一种很重要且流行的字符串处理方法
 
特殊编码
===============================================
不同的编码对正规表示法的抓取字符会有影响，
但下面这些特殊符号的意义是确定的
特殊符号代表意义[:alnum:]代表英文大小写字节及数字，亦即 0-9, A-Z, a-z[:alpha:]代表任何英文大小写字节，亦即 A-Z, a-z[:blank:]代表空白键和[Tab]按键[:cntrl:]代表键盘上面的控制按键，即 CR, LF, Tab, Del.. 等[:digit:]代表数字而已，即 0-9[:graph:]除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键[:lower:]代表小写字节，亦即 a-z[:print:]代表任何可以被打印出来的字节[:punct:]代表标点符号 (punctuation symbol)，即：" ' ? ! ; : # $...[:upper:]代表大写字节，亦即 A-Z[:space:]任何会产生空白的字节，包括空白键, [Tab], CR 等等[:xdigit:]代表16进制的数字类型，包括： 0-9, A-F, a-f 的数字与字节 
## POSIX标准正则编码与其他用法的对应表格
POSIXNon
standardPerl
TclVimASCII[:alnum:]   [A-Za-z0-9] [:word:]\w\w[A-Za-z0-9_]  \W\W[^A-Za-z0-9_][:alpha:]  \a[A-Za-z][:blank:]  \s[ \t]  \b\< \>(?<=\W)(?=\w)|(?<=\w)(?=\W)[:cntrl:]   [\x00-\x1F\x7F][:digit:] \d\d[0-9]  \D\D[^0-9][:graph:]   [\x21-\x7E][:lower:]  \l[a-z][:print:]  \p[\x20-\x7E][:punct:]   [][!"#$%&'()*+,./:;<=>?@\^_`{|}~-][:space:] \s\_s[ \t\r\n\v\f]  \S\S[^ \t\r\n\v\f][:upper:]  \u[A-Z][:xdigit:]  \x[A-Fa-f0-9] 
## 不存在于POSIX标准字符之中的字符含义
"[:word:]"/"\w" - Alphanumeric characters plus "_"
"\W" - Non-word characters
"\b"/"\< \>" - Word boundaries
"\D" - Non-digits
"\S" - Non-whitespace characters
 
基础正规表示法字符汇整
===============================================
RE 字符含义与例子^word## 以word开头的行
## 查找行首为"#"开始的那一行，并列出行号
grep -n '^#' regular_express.txtword$## 以word结尾的行
## 查找行尾为"!"的那一行，并列出行号
grep -n '!$' regular_express.txt.## 代表『一定有一个任意字节』的字符！
## 查找"e"+"任意一个字符,包括空格"+"e"的字符串
grep -n 'e.e' regular_express.txt\## 脱义字符，将特殊符号的特殊意义去除！
## 查找含有单引号 ' 的那一行！
grep -n \' regular_express.txt*## 重复零个到无穷多个的前一个 RE 字符
## 找出含有 (es) (ess) (esss) ...的字串
grep -n 'ess*' regular_express.txt
## 因为 * 可以是 0 个，所以 es 也是符合带搜寻字串。
## 另外，因为 * 为重复『前一个 RE 字符』的符号，因此，在 * 之前必须要紧接著一个 RE 字符！例如任意字节则为 『.*』 ！[list]## 字节集合的 RE 字符，里面列出想要选择的字节！
## 搜寻含有 (gl) 或 (gd) 的那一行
grep -n 'g[ld]' regular_express.txt
## 需要特别留意的是，在 [] 当中『谨代表一个待搜寻的字节』， 例如『 a[afl]y 』代表搜寻的字串可以是 aay, afy, aly 即 [afl] 代表 a 或 f 或 l 的意思！[n1-n2]## 字节集合的 RE 字符，里面列出想要撷取的字节范围！
## 搜寻含有任意数字的那一行！
grep -n '[A-Z]' regular_express.txt
## 需特别留意，在字节集合 [] 中的减号 - 是有特殊意义的，他代表两个字节之间的所有连续字节！但这个连续与否与 ASCII 编码有关，因此，你的编码需要配置正确(在 bash 当中，需要确定 LANG 与 LANGUAGE 的变量是否正确！) 例如所有大写字节则为 [A-Z][^list]## 字节集合的 RE 字符，里面列出不要的字串或范围！
## 搜寻的字串可以是 "oo"+"任意一个字符"，除了"oot"
grep -n 'oo[^t]' regular_express.txt
## 那个 ^ 在 [] 内时，代表的意义是『反向选择』的意思。 例如，我不要大写字节，则为 [^A-Z]。但是，需要特别注意的是，如果以 grep -n [^A-Z] regular_express.txt 来搜寻，却发现该文件内的所有行都被列出，为什么？因为这个 [^A-Z] 是『非大写字节』的意思， 因为每一行均有非大写字节，例如第一行的 "Open Source" 就有 p,e,n,o.... 等等的小写字\{n,m\}## 连续 n 到 m 个的『前一个 RE 字符』
## 若为 \{n\} 则是连续 n 个的前一个 RE 字符，
## 若是 \{n,\} 则是连续 n 个以上的前一个 RE 字符！ 
## 在 g 与 g 之间有2到3的 o 存在的字串，亦即 (goog)(gooog)
grep -n 'go\{2,3\}g' regular_express.txt 
 
扩展正规表示法
===============================================
RE 字符含义和例子+## 重复『一个或一个以上』的前一个 RE 字符
## 搜寻 (god) (good) (goood)... 等等的字符串
egrep -n 'go+d' regular_express.txt?## 『零个或一个』的前一个 RE 字符
## 搜寻 (gd) (god) 这两个字串。 
egrep -n 'go?d' regular_express.txt
## 'go+d' 与 'go?d'的结果集合与 'go*d' 相同|## 用或( or )的方式找出数个字串
## 搜寻 gd 或 good 这两个字串
egrep -n 'gd|good' regular_express.txt
egrep -n 'gd|good|dog' regular_express.txt()## 找出『群组』字串
## 搜寻 (glad) 或 (good) 这两个字串
egrep -n 'g(la|oo)d' regular_express.txt()+## 多个重复群组的判别
## 用echo打印『AxyzxyzxyzxyzC』，然后查找A和C中间包含1或多个xyz的判别
echo 'AxyzxyzxyzxyzC' | egrep 'A(xyz)+C' 
 
ASCII码表：
===============================================
ASCIIHexSymbol0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
150
1
2
3
4
5
6
7
8
9
A
B
C
D
E
FNUL
SOH
STX
ETX
EOT
ENQ
ACK
BEL
BS
TAB
LF
VT
FF
CR
SO
SIASCIIHexSymbol16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
3110
11
12
13
14
15
16
17
18
19
1A
1B
1C
1D
1E
1FDLE
DC1
DC2
DC3
DC4
NAK
SYN
ETB
CAN
EM
SUB
ESC
FS
GS
RS
USASCIIHexSymbol32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
4720
21
22
23
24
25
26
27
28
29
2A
2B
2C
2D
2E
2F(space)
!
"
#
$
%
&
'
(
)
*
+
,
-
.
/ASCIIHexSymbol48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
6330
31
32
33
34
35
36
37
38
39
3A
3B
3C
3D
3E
3F0
1
2
3
4
5
6
7
8
9
:
;
<
=
>
?ASCIIHexSymbol64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
7940
41
42
43
44
45
46
47
48
49
4A
4B
4C
4D
4E
4F@
A
B
C
D
E
F
G
H
I
J
K
L
M
N
OASCIIHexSymbol80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
9550
51
52
53
54
55
56
57
58
59
5A
5B
5C
5D
5E
5FP
Q
R
S
T
U
V
W
X
Y
Z
[
\
]
^
_ASCIIHexSymbol96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
11160
61
62
63
64
65
66
67
68
69
6A
6B
6C
6D
6E
6F`
a
b
c
d
e
f
g
h
i
j
k
l
m
n
oASCIIHexSymbol112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
12770
71
72
73
74
75
76
77
78
79
7A
7B
7C
7D
7E
7Fp
q
r
s
t
u
v
w
x
y
z
{
|
}
~
  
 
